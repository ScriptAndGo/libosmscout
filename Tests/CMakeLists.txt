#---- AccessParse
add_executable(AccessParse src/AccessParse.cpp)
set_property(TARGET AccessParse PROPERTY CXX_STANDARD 11)
target_include_directories(AccessParse PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(AccessParse OSMScout)
else()
  target_link_libraries(AccessParse osmscout)
endif()
add_test(NAME AccessParse COMMAND AccessParse)

#---- Bearing
add_executable(Bearing src/Bearing.cpp)
set_property(TARGET Bearing PROPERTY CXX_STANDARD 11)
target_include_directories(Bearing PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(Bearing OSMScout)
else()
  target_link_libraries(Bearing osmscout)
endif()
add_test(NAME Bearing COMMAND Bearing)

#---- BitsAndBytesNeeded
add_executable(BitsAndBytesNeeded src/BitsAndBytesNeeded.cpp)
set_property(TARGET BitsAndBytesNeeded PROPERTY CXX_STANDARD 11)
target_include_directories(BitsAndBytesNeeded PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(BitsAndBytesNeeded OSMScout)
else()
  target_link_libraries(BitsAndBytesNeeded osmscout)
endif()
add_test(NAME BitsAndBytesNeeded COMMAND BitsAndBytesNeeded)

#---- CachePerformance
add_executable(CachePerformance src/CachePerformance.cpp)
set_property(TARGET CachePerformance PROPERTY CXX_STANDARD 11)
target_include_directories(CachePerformance PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(CachePerformance OSMScout)
else()
  target_link_libraries(CachePerformance osmscout)
endif()

#---- CalculateResolution
add_executable(CalculateResolution src/CalculateResolution.cpp)
set_property(TARGET CalculateResolution PROPERTY CXX_STANDARD 11)
target_include_directories(CalculateResolution PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(CalculateResolution OSMScout)
else()
  target_link_libraries(CalculateResolution osmscout)
endif()

#---- CmdLineParsing
add_executable(CmdLineParsing src/CmdLineParsing.cpp)
set_property(TARGET CmdLineParsing PROPERTY CXX_STANDARD 11)
target_include_directories(CmdLineParsing PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(CmdLineParsing OSMScout)
else()
  target_link_libraries(CmdLineParsing osmscout)
endif()
add_test(NAME CmdLineParsing COMMAND CmdLineParsing)

#---- ColorParse
add_executable(ColorParse src/ColorParse.cpp)
set_property(TARGET ColorParse PROPERTY CXX_STANDARD 11)
target_include_directories(ColorParse PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(ColorParse OSMScout)
else()
  target_link_libraries(ColorParse osmscout)
endif()
add_test(NAME ColorParse COMMAND ColorParse)

#---- CoordinateCalculations
add_executable(CoordinateCalculations src/CoordinateCalculations.cpp)
set_property(TARGET CoordinateCalculations PROPERTY CXX_STANDARD 11)
target_include_directories(CoordinateCalculations PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(CoordinateCalculations OSMScout)
else()
  target_link_libraries(CoordinateCalculations osmscout)
endif()
#add_test(NAME CoordinateCalculations COMMAND CoordinateCalculations)

#---- CoordinateEncoding
add_executable(CoordinateEncoding src/CoordinateEncoding.cpp)
set_property(TARGET CoordinateEncoding PROPERTY CXX_STANDARD 11)
target_include_directories(CoordinateEncoding PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(CoordinateEncoding OSMScout)
else()
  target_link_libraries(CoordinateEncoding osmscout)
endif()
# TODO: add sample data and arguments to test
#add_test(NAME CoordinateEncoding COMMAND CoordinateEncoding)

#---- LocationLookup
add_executable(LocationLookupTest src/SearchForLocationByStringTest.cpp src/SearchForLocationByFormTest.cpp src/SearchForPOIByFormTest.cpp src/LocationServiceTest.cpp)
set_property(TARGET LocationLookupTest PROPERTY CXX_STANDARD 11)
target_include_directories(LocationLookupTest PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout-test/include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout-import/include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(LocationLookupTest OSMScoutTest OSMScoutImport OSMScout)
else()
  target_link_libraries(LocationLookupTest osmscout_test osmscout_import osmscout)
endif()
add_test(NAME LocationLookupTest COMMAND LocationLookupTest)
set_tests_properties(LocationLookupTest PROPERTIES ENVIRONMENT TESTS_TOP_DIR=${CMAKE_CURRENT_SOURCE_DIR})

#---- NumberSetPerformance
add_executable(NumberSetPerformance src/NumberSetPerformance.cpp)
set_property(TARGET NumberSetPerformance PROPERTY CXX_STANDARD 11)
target_include_directories(NumberSetPerformance PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(NumberSetPerformance OSMScout)
else()
  target_link_libraries(NumberSetPerformance osmscout)
endif()

#---- ReaderScannerPerformance
add_executable(ReaderScannerPerformance src/ReaderScannerPerformance.cpp)
set_property(TARGET ReaderScannerPerformance PROPERTY CXX_STANDARD 11)
target_include_directories(ReaderScannerPerformance PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(ReaderScannerPerformance OSMScout)
else()
  target_link_libraries(ReaderScannerPerformance osmscout)
endif()

#---- MultiDBRouting
add_executable(MultiDBRouting src/MultiDBRouting.cpp)
set_property(TARGET MultiDBRouting PROPERTY CXX_STANDARD 11)
target_include_directories(MultiDBRouting PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(MultiDBRouting OSMScout)
else()
  target_link_libraries(MultiDBRouting osmscout)
endif()
# TODO: add sample data and arguments to test
#add_test(NAME  COMMAND )

#---- ThreadedDatabase
if(${OSMSCOUT_BUILD_MAP})
	add_executable(ThreadedDatabase src/ThreadedDatabase.cpp)
	set_property(TARGET ThreadedDatabase PROPERTY CXX_STANDARD 11)
	target_include_directories(ThreadedDatabase PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout-map/include)
	if(APPLE)
	  target_link_libraries(ThreadedDatabase OSMScout OSMScoutMap)
	else()
	  target_link_libraries(ThreadedDatabase osmscout osmscout_map)
	endif()
  # TODO: add sample data and arguments to test
  #add_test(NAME  COMMAND )
else()
	message("Skip ThreadedDatabase test libosmscout-map, is missing.")
endif()


if(${OSMSCOUT_BUILD_MAP_QT})
  set(src_files src/DrawTextQt.cpp include/DrawWindow.h)
  qt5_wrap_cpp(src_files include/DrawWindow.h)
  add_executable(DrawTextQt ${src_files})
  set_property(TARGET DrawTextQt PROPERTY CXX_STANDARD 11)
  target_include_directories(DrawTextQt PRIVATE include ${CMAKE_CURRENT_BINARY_DIR} ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout-map/include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout-map-qt/include ${Qt5Gui_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS})
  if(APPLE)
    target_link_libraries(DrawTextQt OSMScout OSMScoutMap OSMScoutMapQt ${Qt5Widgets_LIBRARIES})
  else()
    target_link_libraries(DrawTextQt osmscout osmscout_map osmscout_map_qt ${Qt5Widgets_LIBRARIES})
  endif()
  target_compile_definitions(DrawTextQt PRIVATE ${Qt5Widgets_DEFINITIONS})
else()
	message("Skip DrawTextQt test, libosmscout-map-qt is missing.")
endif()

#---- Geometry
add_executable(Geometry src/Geometry.cpp)
set_property(TARGET Geometry PROPERTY CXX_STANDARD 11)
target_include_directories(Geometry PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(Geometry OSMScout)
else()
  target_link_libraries(Geometry osmscout)
endif()
add_test(NAME Geometry COMMAND Geometry)

#---- WorkQueue
add_executable(WorkQueue src/WorkQueue.cpp)
set_property(TARGET WorkQueue PROPERTY CXX_STANDARD 11)
target_include_directories(WorkQueue PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(WorkQueue OSMScout)
else()
  target_link_libraries(WorkQueue osmscout)
endif()
add_test(NAME WorkQueue COMMAND WorkQueue)

#---- MapRotate
if(${OSMSCOUT_BUILD_MAP})
  add_executable(MapRotate src/MapRotate.cpp)
  set_property(TARGET MapRotate PROPERTY CXX_STANDARD 11)
  target_include_directories(MapRotate PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout-map/include)
  if(APPLE)
    target_link_libraries(MapRotate OSMScout OSMScoutMap)
  else()
    target_link_libraries(MapRotate osmscout osmscout_map)
  endif()
  add_test(NAME MapRotate COMMAND MapRotate)
else()
	message("Skip MapRotate test libosmscout-map, is missing.")
endif()

#---- EncodeNumber
add_executable(EncodeNumber src/EncodeNumber.cpp)
set_property(TARGET EncodeNumber PROPERTY CXX_STANDARD 11)
target_include_directories(EncodeNumber PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(EncodeNumber OSMScout)
else()
  target_link_libraries(EncodeNumber osmscout)
endif()
add_test(NAME EncodeNumber COMMAND EncodeNumber)

#---- FileScannerWriter
add_executable(FileScannerWriter src/FileScannerWriter.cpp)
set_property(TARGET FileScannerWriter PROPERTY CXX_STANDARD 11)
target_include_directories(FileScannerWriter PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(FileScannerWriter OSMScout)
else()
  target_link_libraries(FileScannerWriter osmscout)
endif()
add_test(NAME FileScannerWriter COMMAND FileScannerWriter)

#---- GeoCoordParse
add_executable(GeoCoordParse src/GeoCoordParse.cpp)
set_property(TARGET GeoCoordParse PROPERTY CXX_STANDARD 11)
target_include_directories(GeoCoordParse PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(GeoCoordParse OSMScout)
else()
  target_link_libraries(GeoCoordParse osmscout)
endif()
add_test(NAME GeoCoordParse COMMAND GeoCoordParse)

#---- NumberSet
add_executable(NumberSet src/NumberSet.cpp)
set_property(TARGET NumberSet PROPERTY CXX_STANDARD 11)
target_include_directories(NumberSet PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(NumberSet OSMScout)
else()
  target_link_libraries(NumberSet osmscout)
endif()
add_test(NAME NumberSet COMMAND NumberSet)

#---- ScanConversion
add_executable(ScanConversion src/ScanConversion.cpp)
set_property(TARGET ScanConversion PROPERTY CXX_STANDARD 11)
target_include_directories(ScanConversion PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(ScanConversion OSMScout)
else()
  target_link_libraries(ScanConversion osmscout)
endif()
add_test(NAME ScanConversion COMMAND ScanConversion)

#---- TilingTest
add_executable(TilingTest src/TilingTest.cpp)
set_property(TARGET TilingTest PROPERTY CXX_STANDARD 11)
target_include_directories(TilingTest PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(TilingTest OSMScout)
else()
  target_link_libraries(TilingTest osmscout)
endif()
add_test(NAME TilingTest COMMAND TilingTest)

#---- TimeParse
add_executable(TimeParse src/TimeParse.cpp)
set_property(TARGET TimeParse PROPERTY CXX_STANDARD 11)
target_include_directories(TimeParse PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(TimeParse OSMScout)
else()
  target_link_libraries(TimeParse osmscout)
endif()
add_test(NAME TimeParse COMMAND TimeParse)

#---- WStringStringConversion
add_executable(WStringStringConversion src/WStringStringConversion.cpp)
set_property(TARGET WStringStringConversion PROPERTY CXX_STANDARD 11)
target_include_directories(WStringStringConversion PRIVATE ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(WStringStringConversion OSMScout)
else()
  target_link_libraries(WStringStringConversion osmscout)
endif()
add_test(NAME WStringStringConversion COMMAND WStringStringConversion)

#---- TransPolygon
add_executable(TransPolygon src/TransPolygon.cpp include/TestWay.h)
set_property(TARGET TransPolygon PROPERTY CXX_STANDARD 11)
target_include_directories(TransPolygon PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(TransPolygon OSMScout)
else()
  target_link_libraries(TransPolygon osmscout)
endif()
add_test(NAME TransPolygon COMMAND TransPolygon)

#---- TransPolygon
add_executable(GeoBox src/GeoBox.cpp)
set_property(TARGET GeoBox PROPERTY CXX_STANDARD 11)
target_include_directories(GeoBox PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include)
if(APPLE)
  target_link_libraries(GeoBox OSMScout)
else()
  target_link_libraries(GeoBox osmscout)
endif()
add_test(NAME GeoBox COMMAND GeoBox)

#---- OSTAndOSSCheck
if(${OSMSCOUT_BUILD_MAP})
  add_executable(OSTAndOSSCheck src/OSTAndOSSCheck.cpp)
  set_property(TARGET OSTAndOSSCheck PROPERTY CXX_STANDARD 11)
  target_include_directories(OSTAndOSSCheck PRIVATE include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout/include ${OSMSCOUT_BASE_DIR_SOURCE}/libosmscout-map/include)
  if(APPLE)
    target_link_libraries(OSTAndOSSCheck OSMScout OSMScoutMap)
  else()
    target_link_libraries(OSTAndOSSCheck osmscout osmscout_map)
  endif()

  set(STYLESHEETS
          standard.oss
          winter-sports.oss
          boundaries.oss
          railways.oss
          motorways.oss
          public-transport.oss)

  foreach(STYLESHEET ${STYLESHEETS})
    add_test(NAME CheckStyleSheet-${STYLESHEET}
            COMMAND OSTAndOSSCheck
              --warning-as-error
              ${CMAKE_CURRENT_SOURCE_DIR}/../stylesheets/map.ost
              ${CMAKE_CURRENT_SOURCE_DIR}/../stylesheets/${STYLESHEET})
  endforeach()
else()
    message("Skip OSTAndOSSCheck test libosmscout-map, is missing.")
endif()
